/// <reference types="node" />
import { DeployStepArgs, AzureUploadConfig, DeployArgs } from "../../interface/buildAndDeployArgs";
import { LogProvider } from "@microsoft/teamsfx-api";
import { BaseDeployDriver } from "./baseDeployDriver";
import * as appService from "@azure/arm-appservice";
import { AzureResourceInfo } from "../../interface/commonArgs";
import { TokenCredential } from "@azure/identity";
export declare abstract class AzureDeployDriver extends BaseDeployDriver {
    protected managementClient: appService.WebSiteManagementClient | undefined;
    static readonly AXIOS_INSTANCE: import("axios").AxiosInstance;
    /**
     * the pattern that used to parse resource id and extract info from it
     */
    abstract pattern: RegExp;
    deploy(args: DeployArgs): Promise<void>;
    /**
     * real azure deploy logic
     * @param args local file needed to be deployed
     * @param azureResource azure resource info
     * @param azureCredential azure user login credential
     */
    abstract azureDeploy(args: DeployStepArgs, azureResource: AzureResourceInfo, azureCredential: TokenCredential): Promise<void>;
    /**
     * check if resource id is legal and parse it
     * @param resourceId deploy target
     * @protected
     */
    protected parseResourceId(resourceId: string): AzureResourceInfo;
    /**
     * deploy to azure app service or azure function use zip deploy method
     * @param args local file needed to be deployed
     * @param azureResource azure resource info
     * @param azureCredential azure user login credential
     * @return the zip deploy time cost
     * @protected
     */
    zipDeploy(args: DeployStepArgs, azureResource: AzureResourceInfo, azureCredential: TokenCredential): Promise<number>;
    /**
     * call azure app service or azure function zip deploy method
     * @param zipDeployEndpoint azure zip deploy endpoint
     * @param zipBuffer zip file buffer
     * @param config azure upload config, including azure account credential
     * @param logger log provider
     * @protected
     */
    protected zipDeployPackage(zipDeployEndpoint: string, zipBuffer: Buffer, config: AzureUploadConfig, logger?: LogProvider): Promise<string>;
    /**
     * loop and check azure deployment status
     * by default, it will wait for 120 minutes
     * @param location azure deployment location
     * @param config azure upload config, including azure account credential
     * @param logger log provider
     * @protected
     */
    protected checkDeployStatus(location: string, config: AzureUploadConfig, logger?: LogProvider): Promise<void>;
    /**
     * create azure zip deploy endpoint
     * @param siteName azure app service or azure function name
     * @protected
     */
    protected getZipDeployEndpoint(siteName: string): string;
    /**
     * create azure deploy config for Azure Function and Azure App service
     * @param azureResource azure resource info
     * @param azureCredential user azure credential
     * @protected
     */
    protected createAzureDeployConfig(azureResource: AzureResourceInfo, azureCredential: TokenCredential): Promise<AzureUploadConfig>;
    protected restartFunctionApp(azureResource: AzureResourceInfo): Promise<void>;
}
//# sourceMappingURL=azureDeployDriver.d.ts.map