/// <reference types="node" />
import { DeployArgs, DeployContext, DeployStepArgs } from "../../interface/buildAndDeployArgs";
import { Ignore } from "ignore";
import { BaseDeployStepDriver } from "../../interface/baseDeployStepDriver";
export declare abstract class BaseDeployDriver extends BaseDeployStepDriver {
    protected static readonly emptyMap: Map<string, string>;
    protected helpLink: string | undefined;
    protected static asDeployArgs: (data: unknown, helpLink?: string | undefined) => DeployArgs;
    run(): Promise<Map<string, string>>;
    /**
     * pack dist folder into zip
     * @param args dist folder and ignore files
     * @param context log provider etc..
     * @protected
     */
    protected packageToZip(args: DeployStepArgs, context: DeployContext): Promise<Buffer>;
    protected handleIgnore(args: DeployStepArgs, context: DeployContext): Promise<Ignore>;
    protected wrapErrorHandler<T>(fn: () => T | Promise<T>): Promise<T>;
    /**
     * real deploy process
     * @param args deploy arguments
     */
    abstract deploy(args: DeployArgs): Promise<void>;
}
//# sourceMappingURL=baseDeployDriver.d.ts.map