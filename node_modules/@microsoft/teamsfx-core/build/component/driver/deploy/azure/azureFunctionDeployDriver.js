"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AzureFunctionDeployDriverImpl = exports.AzureFunctionDeployDriver = void 0;
const tslib_1 = require("tslib");
const azureDeployDriver_1 = require("./azureDeployDriver");
const typedi_1 = require("typedi");
const common_1 = require("../../../utils/common");
const messages_1 = require("../../../messages");
const hooks_1 = require("@feathersjs/hooks");
const addStartAndEndTelemetry_1 = require("../../middleware/addStartAndEndTelemetry");
const commonConstant_1 = require("../../../constant/commonConstant");
const localizeUtils_1 = require("../../../../common/localizeUtils");
const ACTION_NAME = "azureFunctions/deploy";
let AzureFunctionDeployDriver = class AzureFunctionDeployDriver {
    constructor() {
        this.description = localizeUtils_1.getLocalizedString("driver.deploy.deployToAzureFunctionsDescription");
    }
    async run(args, context) {
        const impl = new AzureFunctionDeployDriverImpl(args, context);
        return common_1.wrapRun(() => impl.run(), () => impl.cleanup(), context.logProvider);
    }
    execute(args, ctx) {
        return common_1.wrapSummary(this.run.bind(this, args, ctx), [
            // eslint-disable-next-line no-secrets/no-secrets
            "driver.deploy.azureFunctionsDeploySummary",
        ]);
    }
};
tslib_1.__decorate([
    hooks_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(ACTION_NAME, commonConstant_1.TelemetryConstant.DEPLOY_COMPONENT_NAME)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AzureFunctionDeployDriver.prototype, "run", null);
AzureFunctionDeployDriver = tslib_1.__decorate([
    typedi_1.Service(ACTION_NAME)
], AzureFunctionDeployDriver);
exports.AzureFunctionDeployDriver = AzureFunctionDeployDriver;
/**
 * deploy to Azure Function
 */
class AzureFunctionDeployDriverImpl extends azureDeployDriver_1.AzureDeployDriver {
    constructor() {
        super(...arguments);
        this.pattern = /\/subscriptions\/([^\/]*)\/resourceGroups\/([^\/]*)\/providers\/Microsoft.Web\/sites\/([^\/]*)/i;
        this.helpLink = "https://aka.ms/teamsfx-actions/azure-functions-deploy";
    }
    async azureDeploy(args, azureResource, azureCredential) {
        var _a, _b, _c;
        await ((_a = this.progressBar) === null || _a === void 0 ? void 0 : _a.start());
        await this.zipDeploy(args, azureResource, azureCredential);
        await ((_b = this.progressBar) === null || _b === void 0 ? void 0 : _b.next(messages_1.ProgressMessages.restartAzureFunctionApp));
        await this.restartFunctionApp(azureResource);
        await ((_c = this.progressBar) === null || _c === void 0 ? void 0 : _c.end(true));
    }
    createProgressBar(ui) {
        var _a;
        return ui === null || ui === void 0 ? void 0 : ui.createProgressBar(`Deploying ${(_a = this.workingDirectory) !== null && _a !== void 0 ? _a : ""} to Azure Function App`, 6);
    }
}
exports.AzureFunctionDeployDriverImpl = AzureFunctionDeployDriverImpl;
//# sourceMappingURL=azureFunctionDeployDriver.js.map