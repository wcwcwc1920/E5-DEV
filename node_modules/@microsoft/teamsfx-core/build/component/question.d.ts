import { ContextV3, FuncQuestion, FxError, Inputs, Json, MultiSelectQuestion, OptionItem, Platform, QTreeNode, Result, SingleSelectQuestion, TextInputQuestion, v2, v3 } from "@microsoft/teamsfx-api";
import { Runtime } from "./constants";
export declare function getQuestionsForProvisionV3(context: v2.Context, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForDeployV3(ctx: ContextV3, inputs: Inputs, envInfo?: v3.EnvInfoV3): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function checkWetherProvisionSucceeded(config: Json): boolean;
export declare function getQuestionsForAddFeatureV3(ctx: v2.Context, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getQuestionsForAddResourceV3(ctx: v2.Context, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare enum FeatureId {
    Tab = "Tab",
    TabNonSso = "TabNonSso",
    TabSPFx = "TabSPFx",
    Notification = "Notification",
    CommandAndResponse = "command-bot",
    Workflow = "workflow-bot",
    Bot = "Bot",
    MessagingExtension = "MessagingExtension",
    function = "function",
    apim = "apim",
    sql = "sql",
    keyvault = "keyvault",
    sso = "sso",
    ApiConnector = "api-connection",
    cicd = "cicd",
    M365SearchApp = "M365SearchApp",
    M365SsoLaunchPage = "M365SsoLaunchPage"
}
export declare const FeatureIdToComponent: {
    Tab: string;
    TabNonSso: string;
    TabSPFx: string;
    M365SsoLaunchPage: string;
    Notification: string;
    "command-bot": string;
    "workflow-bot": string;
    Bot: string;
    M365SearchApp: string;
    MessagingExtension: string;
    function: string;
    apim: string;
    sql: string;
    keyvault: string;
    sso: string;
    "api-connection": string;
    cicd: string;
};
export declare function getActionNameByFeatureId(featureId: FeatureId): string | undefined;
export declare function getQuestionsForAddFeatureSubCommand(featureId: FeatureId, inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getNotificationTriggerQuestionNode(inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
export declare function getPluginCLIName(name: string): string;
export declare function getPlatformRuntime(platform: Platform): Runtime;
export declare function createAddAzureResourceQuestion(alreadyHaveFunction: boolean, alreadyHaveSQL: boolean, alreadyHaveAPIM: boolean, alreadyHaveKeyVault: boolean): MultiSelectQuestion;
export declare function createAddCloudResourceOptions(alreadyHaveAPIM: boolean, alreadyHaveKeyVault: boolean): OptionItem[];
export declare function addCapabilityQuestion(alreadyHaveTab: boolean, alreadyHaveBot: boolean): MultiSelectQuestion;
export declare const DeployPluginSelectQuestion: MultiSelectQuestion;
export declare const AskSubscriptionQuestion: FuncQuestion;
export declare function getUserEmailQuestion(currentUserEmail: string): TextInputQuestion;
export declare const SelectEnvQuestion: SingleSelectQuestion;
export declare const InitEditorVSCode: OptionItem;
export declare const InitEditorVS: OptionItem;
export declare const InitCapabilityTab: OptionItem;
export declare const InitCapabilityBot: OptionItem;
export declare const InitOptionYes: OptionItem;
export declare const InitOptionNo: OptionItem;
export declare const InitEditorQuestion: SingleSelectQuestion;
export declare const InitCapabilityQuestion: SingleSelectQuestion;
export declare const InitIsSPFxQuestion: SingleSelectQuestion;
export declare const InitDebugProceedQuestion: SingleSelectQuestion;
export declare const InitInfraProceedQuestion: SingleSelectQuestion;
export declare function getQuestionsForInit(type: "debug" | "infra", inputs: Inputs): Result<QTreeNode | undefined, FxError>;
export declare function getQuestionsForPublishInDeveloperPortal(inputs: Inputs): Promise<Result<QTreeNode | undefined, FxError>>;
//# sourceMappingURL=question.d.ts.map