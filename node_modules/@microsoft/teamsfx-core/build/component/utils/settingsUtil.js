"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.settingsUtil = exports.SettingsUtils = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const uuid = tslib_1.__importStar(require("uuid"));
const error_1 = require("../../core/error");
const globalVars_1 = require("../../core/globalVars");
class SettingsUtils {
    async readSettings(projectPath, ensureTrackingId = true) {
        const filePath = path.resolve(projectPath, teamsfx_api_1.SettingsFolderName, teamsfx_api_1.SettingsFileName);
        if (!(await fs.pathExists(filePath))) {
            return teamsfx_api_1.err(new error_1.PathNotExistError(filePath));
        }
        const settings = await fs.readJson(filePath);
        if (!settings.trackingId && ensureTrackingId) {
            settings.trackingId = uuid.v4();
            await fs.writeFile(filePath, JSON.stringify(settings, null, 4));
        }
        globalVars_1.globalVars.trackingId = settings.trackingId; // set trackingId to globalVars
        return teamsfx_api_1.ok(settings);
    }
    async writeSettings(projectPath, settings) {
        const filePath = path.resolve(projectPath, teamsfx_api_1.SettingsFolderName, teamsfx_api_1.SettingsFileName);
        await fs.writeFile(filePath, JSON.stringify(settings, null, 4));
        return teamsfx_api_1.ok(filePath);
    }
}
exports.SettingsUtils = SettingsUtils;
exports.settingsUtil = new SettingsUtils();
//# sourceMappingURL=settingsUtil.js.map