"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectVersionCheckerMW = void 0;
const tslib_1 = require("tslib");
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const globalVars_1 = require("../globalVars");
const localizeUtils_1 = require("../../common/localizeUtils");
const semver_1 = tslib_1.__importDefault(require("semver"));
const tools_1 = require("../../common/tools");
const v3MigrationUtils_1 = require("./utils/v3MigrationUtils");
let userCancelFlag = false;
const methods = new Set(["getProjectConfig", "checkPermission"]);
const ProjectVersionCheckerMW = async (ctx, next) => {
    const currentProjectVersion = await v3MigrationUtils_1.getProjectVersion(ctx);
    if ((await needToShowUpdateDialog(ctx, currentProjectVersion)) && checkMethod(ctx)) {
        showDialog(ctx, currentProjectVersion);
    }
    await next();
};
exports.ProjectVersionCheckerMW = ProjectVersionCheckerMW;
async function needToShowUpdateDialog(ctx, currentProjectVersion) {
    if (currentProjectVersion) {
        const currentSupportProjectVersion = tools_1.isV3Enabled() ? "< 4.0.0" : "< 3.0.0"; // declare the const at the beginning after cleared V3 feature flag
        if (!semver_1.default.satisfies(currentProjectVersion, currentSupportProjectVersion)) {
            return true;
        }
    }
    return false;
}
// TODO: add url for download proper toolkit version
async function showDialog(ctx, currentProjectVersion) {
    const lastArg = ctx.arguments[ctx.arguments.length - 1];
    const inputs = lastArg === ctx ? ctx.arguments[ctx.arguments.length - 2] : lastArg;
    if (inputs.platform === teamsfx_api_1.Platform.VSCode) {
        await (globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.ui.showMessage("warn", localizeUtils_1.getLocalizedString("core.projectVersionChecker.vscodeUseNewVersion"), false, "OK"));
    }
    else if (inputs.platform === teamsfx_api_1.Platform.CLI) {
        globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.logProvider.warning(localizeUtils_1.getLocalizedString("core.projectVersionChecker.cliUseNewVersion"));
    }
    else if (inputs.platform === teamsfx_api_1.Platform.VS) {
        await (globalVars_1.TOOLS === null || globalVars_1.TOOLS === void 0 ? void 0 : globalVars_1.TOOLS.ui.showMessage("warn", localizeUtils_1.getLocalizedString("core.projectVersionChecker.vscodeUseNewVersion"), false, "OK"));
    }
}
function checkMethod(ctx) {
    if (ctx.method && methods.has(ctx.method) && userCancelFlag)
        return false;
    userCancelFlag = ctx.method != undefined && methods.has(ctx.method);
    return true;
}
//# sourceMappingURL=projectVersionChecker.js.map