"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppYmlGenerator = exports.BaseAppYmlGenerator = void 0;
const tslib_1 = require("tslib");
const MigrationUtils_1 = require("./MigrationUtils");
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const handlebars = tslib_1.__importStar(require("handlebars"));
const folder_1 = require("../../../folder");
class BaseAppYmlGenerator {
    constructor(oldProjectSettings) {
        this.oldProjectSettings = oldProjectSettings;
    }
    async buildHandlebarsTemplate(templateName) {
        const templatePath = path.join(folder_1.getTemplatesFolder(), "core/v3Migration", templateName);
        const templateString = await fs.readFile(templatePath, "utf8");
        const template = handlebars.compile(templateString);
        return template(this.handlebarsContext);
    }
}
exports.BaseAppYmlGenerator = BaseAppYmlGenerator;
class AppYmlGenerator extends BaseAppYmlGenerator {
    constructor(oldProjectSettings, bicepContent, projectPath) {
        super(oldProjectSettings);
        this.bicepContent = bicepContent;
        this.projectPath = projectPath;
        this.handlebarsContext = {
            activePlugins: {},
            placeholderMappings: {},
            aadAppName: undefined,
            teamsAppName: undefined,
            appName: undefined,
            isFunctionBot: false,
        };
    }
    async generateAppYml() {
        var _a;
        await this.generateCommonHandlerbarsContext();
        const solutionSettings = this.oldProjectSettings.solutionSettings;
        if (solutionSettings.hostType.toLowerCase() === "azure") {
            await this.generateAzureHandlebarsContext();
            switch ((_a = this.oldProjectSettings.programmingLanguage) === null || _a === void 0 ? void 0 : _a.toLowerCase()) {
                case "javascript":
                case "typescript":
                    return await this.buildHandlebarsTemplate("js.ts.app.yml");
                case "csharp":
                    return await this.buildHandlebarsTemplate("csharp.app.yml");
            }
        }
        else if (solutionSettings.hostType.toLowerCase() === "spfx") {
            return await this.buildHandlebarsTemplate("spfx.app.yml");
        }
        throw new Error("The current tooling cannot upgrade your project temporary. Please raise an issue in GitHub for your project.");
    }
    async generateCommonHandlerbarsContext() {
        // project setting information
        this.handlebarsContext.appName = this.oldProjectSettings.appName;
        const azureSolutionSettings = this.oldProjectSettings.solutionSettings;
        for (const activePlugin of azureSolutionSettings.activeResourcePlugins) {
            this.handlebarsContext.activePlugins[activePlugin] = true; // convert array items to object properties to simplify handlebars template
        }
        // app names
        const aadManifestPath = path.join(this.projectPath, "aad.manifest.template.json");
        if (await fs.pathExists(aadManifestPath)) {
            const aadManifest = await fs.readJson(path.join(this.projectPath, "aad.manifest.template.json"));
            this.handlebarsContext.aadAppName = aadManifest.name;
        }
        const teamsAppManifestPath = path.join(this.projectPath, "appPackage/manifest.template.json");
        if (await fs.pathExists(teamsAppManifestPath)) {
            const teamsAppManifest = await fs.readJson(path.join(this.projectPath, "appPackage/manifest.template.json"));
            this.handlebarsContext.teamsAppName = teamsAppManifest.name.short;
        }
    }
    async generateAzureHandlebarsContext() {
        // isFunctionBot
        const pluginSettings = this.oldProjectSettings.pluginSettings;
        if (pluginSettings &&
            pluginSettings["fx-resource-bot"] &&
            pluginSettings["fx-resource-bot"]["host-type"] === "azure-function") {
            this.handlebarsContext.isFunctionBot = true;
        }
        // placeholders
        this.setPlaceholderMapping("state.fx-resource-frontend-hosting.storageResourceId");
        this.setPlaceholderMapping("state.fx-resource-frontend-hosting.endpoint");
        this.setPlaceholderMapping("state.fx-resource-frontend-hosting.resourceId");
        this.setPlaceholderMapping("state.fx-resource-bot.resourceId");
        this.setPlaceholderMapping("state.fx-resource-bot.functionAppResourceId");
    }
    setPlaceholderMapping(placeholder) {
        const result = MigrationUtils_1.namingConverterV3(placeholder, MigrationUtils_1.FileType.STATE, this.bicepContent);
        if (result.isOk()) {
            this.handlebarsContext.placeholderMappings[placeholder] = result.value;
        }
        // ignore non-exist placeholder
    }
}
exports.AppYmlGenerator = AppYmlGenerator;
//# sourceMappingURL=appYmlGenerator.js.map