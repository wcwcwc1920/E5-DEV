"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.setUpLocalProjectsTask = exports.createResourcesTask = exports.generateLabel = exports.getPlaceholderMappings = exports.isCommentArray = exports.isCommentObject = exports.readJsonCommentFile = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const comment_json_1 = require("comment-json");
const MigrationUtils_1 = require("../MigrationUtils");
const v3MigrationUtils_1 = require("../v3MigrationUtils");
async function readJsonCommentFile(filepath) {
    if (await fs_extra_1.default.pathExists(filepath)) {
        const content = await fs_extra_1.default.readFile(filepath);
        const data = comment_json_1.parse(content.toString());
        return data;
    }
}
exports.readJsonCommentFile = readJsonCommentFile;
function isCommentObject(data) {
    return typeof data === "object" && !Array.isArray(data) && !!data;
}
exports.isCommentObject = isCommentObject;
function isCommentArray(data) {
    return Array.isArray(data);
}
exports.isCommentArray = isCommentArray;
async function getPlaceholderMappings(context) {
    const bicepContent = await v3MigrationUtils_1.readBicepContent(context);
    const getName = (name) => {
        const res = MigrationUtils_1.namingConverterV3(name, MigrationUtils_1.FileType.STATE, bicepContent);
        return res.isOk() ? res.value : undefined;
    };
    return {
        tabDomain: getName("state.fx-resource-frontend-hosting.domain"),
        tabEndpoint: getName("state.fx-resource-frontend-hosting.endpoint"),
        tabIndexPath: getName("state.fx-resource-frontend-hosting.indexPath"),
        botDomain: getName("state.fx-resource-bot.domain"),
        botEndpoint: getName("state.fx-resource-bot.siteEndpoint"),
    };
}
exports.getPlaceholderMappings = getPlaceholderMappings;
function generateLabel(base, existingLabels) {
    let prefix = 0;
    while (true) {
        const generatedLabel = base + (prefix > 0 ? ` ${prefix.toString()}` : "");
        if (!existingLabels.includes(generatedLabel)) {
            return generatedLabel;
        }
        prefix += 1;
    }
}
exports.generateLabel = generateLabel;
function createResourcesTask(label) {
    const comment = `{
    // Create the debug resources.
    // See https://aka.ms/teamsfx-provision-task to know the details and how to customize the args.
  }`;
    const task = {
        label,
        type: "teamsfx",
        command: "provision",
        args: {
            template: "${workspaceFolder}/teamsfx/app.local.yml",
            env: "local",
        },
    };
    return comment_json_1.assign(comment_json_1.parse(comment), task);
}
exports.createResourcesTask = createResourcesTask;
function setUpLocalProjectsTask(label) {
    const comment = `{
    // Set up local projects.
    // See https://aka.ms/teamsfx-deploy-task to know the details and how to customize the args.
  }`;
    const task = {
        label,
        type: "teamsfx",
        command: "deploy",
        args: {
            template: "${workspaceFolder}/teamsfx/app.local.yml",
            env: "local",
        },
    };
    return comment_json_1.assign(comment_json_1.parse(comment), task);
}
exports.setUpLocalProjectsTask = setUpLocalProjectsTask;
//# sourceMappingURL=debugV3MigrationUtils.js.map