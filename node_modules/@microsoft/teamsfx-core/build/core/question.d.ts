import { FolderQuestion, OptionItem, Platform, SingleSelectQuestion, TextInputQuestion, FuncQuestion, Inputs, MultiSelectQuestion } from "@microsoft/teamsfx-api";
import { StaticTab } from "../component/resource/appManifest/interfaces/staticTab";
export declare enum CoreQuestionNames {
    AppName = "app-name",
    DefaultAppNameFunc = "default-app-name-func",
    Folder = "folder",
    ProjectPath = "projectPath",
    ProgrammingLanguage = "programming-language",
    Capabilities = "capabilities",
    Features = "features",
    Solution = "solution",
    CreateFromScratch = "scratch",
    Runtime = "runtime",
    Samples = "samples",
    Stage = "stage",
    SubStage = "substage",
    SourceEnvName = "sourceEnvName",
    TargetEnvName = "targetEnvName",
    TargetResourceGroupName = "targetResourceGroupName",
    NewResourceGroupName = "newResourceGroupName",
    NewResourceGroupLocation = "newResourceGroupLocation",
    NewTargetEnvName = "newTargetEnvName",
    ExistingTabEndpoint = "existing-tab-endpoint",
    SafeProjectName = "safeProjectName",
    ReplaceContentUrl = "replaceContentUrl",
    ReplaceWebsiteUrl = "replaceWebsiteUrl",
    ManifestPath = "manifestPath",
    ReplaceBotIds = "replaceBotIds"
}
export declare const ProjectNamePattern = "^(?=(.*[\\da-zA-Z]){2})[a-zA-Z][^\"<>:\\?/*&|\0-\u001F]*[^\"\\s.<>:\\?/*&|\0-\u001F]$";
export declare function createAppNameQuestion(defaultAppName?: string, validateProjectPathExistence?: boolean): TextInputQuestion;
export declare const DefaultAppNameFunc: FuncQuestion;
export declare const QuestionRootFolder: FolderQuestion;
export declare const ProgrammingLanguageQuestionForDotNet: SingleSelectQuestion;
export declare const ProgrammingLanguageQuestion: SingleSelectQuestion;
export declare function handleSelectionConflict<T>(sets: Set<T>[], previous: Set<T>, current: Set<T>): Set<T>;
export declare function validateConflict<T>(sets: Set<T>[], current: Set<T>): string | undefined;
export declare function createCapabilityQuestion(): MultiSelectQuestion;
export declare function createCapabilityForDotNet(): SingleSelectQuestion;
export declare function createCapabilityQuestionPreview(inputs?: Inputs): SingleSelectQuestion;
export declare function validateCapabilities(inputs: string[]): string | undefined;
export declare function onChangeSelectionForCapabilities(currentSelectedIds: Set<string>, previousSelectedIds: Set<string>): Promise<Set<string>>;
export declare const QuestionSelectTargetEnvironment: SingleSelectQuestion;
export declare function getQuestionNewTargetEnvironmentName(projectPath: string): TextInputQuestion;
export declare const QuestionSelectSourceEnvironment: SingleSelectQuestion;
export declare const QuestionSelectResourceGroup: SingleSelectQuestion;
export declare function newResourceGroupNameQuestion(existingResourceGroupNames: string[]): TextInputQuestion;
export declare const QuestionNewResourceGroupName: TextInputQuestion;
export declare const QuestionNewResourceGroupLocation: SingleSelectQuestion;
export declare const ScratchOptionYesVSC: OptionItem;
export declare const ScratchOptionNoVSC: OptionItem;
export declare const RuntimeOptionNodeJs: OptionItem;
export declare const RuntimeOptionDotNet: OptionItem;
export declare const ScratchOptionYes: OptionItem;
export declare const ScratchOptionNo: OptionItem;
export declare function getRuntimeQuestion(): SingleSelectQuestion;
export declare function getCreateNewOrFromSampleQuestion(platform: Platform): SingleSelectQuestion;
export declare const SampleSelect: SingleSelectQuestion;
export declare const ExistingTabEndpointQuestion: TextInputQuestion;
export declare const defaultTabLocalHostUrl = "https://localhost:53000/index.html#/tab";
export declare const tabsContentUrlQuestion: (tabs: StaticTab[]) => MultiSelectQuestion;
export declare const tabsWebsitetUrlQuestion: (tabs: StaticTab[]) => MultiSelectQuestion;
export declare const tabContentUrlOptionItem: (tab: StaticTab) => OptionItem;
export declare const tabWebsiteUrlOptionItem: (tab: StaticTab) => OptionItem;
export declare const BotIdsQuestion: (botId: string | undefined, messageExtensionBotId: string | undefined) => MultiSelectQuestion;
export declare const botOptionItem: (isMessageExtension: boolean) => OptionItem;
export declare const CreateNewOfficeAddinOption: OptionItem;
export declare function createCapabilityForOfficeAddin(): SingleSelectQuestion;
//# sourceMappingURL=question.d.ts.map